mycars$tdisp <- mtcars$cyl * mtcars$disp
#散佈圖 車重 vs 油耗
ggplot(mycars, aes(x = wt, y = mpg)) + geom_point(aes(color = am))
#散佈圖 馬力 vs 油耗
ggplot(mycars, aes(x = hp, y = mpg)) + geom_point(aes(color = hp))
#箱型圖觀察 自手排 vs 油耗
ggplot(mycars, aes(x = am, y = mpg)) + geom_boxplot(aes(fill = am))
mlm <- lm(mpg ~ wt + hp + am + tdisp, data = mycars)
summary(mlm)
df <- data.frame(wt = 3,hp=245,am="automatic",tdisp=1548)
result <- predict(mlm, newdata = df)
result
clear
clear()
#安裝package
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rattle")
#載入library
library("rpart")
library("rpart.plot")
library("rattle")
#載入AER Package(AER: Applied Econometrics with R)
#install.packages("AER")
library(AER)
#(1)載入creditcard資料集(包含1,319筆觀察測試，共有12個變數)
data(CreditCard)
#假設我們只要以下欄位(card:是否核准卡片、信用貶弱報告數、年齡、收入(美金)、自有住宅狀況、往來年月)
bankcard <- subset(CreditCard, select = c(card, reports, age, income, owner, months))
#將是否核准卡片轉換為0/1數值
bankcard$card <- ifelse(bankcard$card == "yes", 1, 0);
View(bankcard)
#(2)測試模型
#取得總筆數
n <- nrow(bankcard)
#設定隨機數種子
set.seed(1117)
#將數據順序重新排列
newbankcard <- bankcard[sample(n),]
#取出樣本數的idx
t_idx <- sample(seq_len(n), size = round(0.7 * n))
#訓練資料與測試資料比例: 70%建模，30%驗證
traindata <- newbankcard[t_idx,]
testdata <- newbankcard[ - t_idx,]
#(3)建立決策樹模型
dtreeM <- rpart(formula = card ~ ., data = traindata, method = "class", control = rpart.control(cp = 0.001))
fancyRpartPlot(dtreeM)
#(5)預測
result <- predict(dtreeM, newdata = testdata, type = "class")
#(6)建立混淆矩陣(confusion matrix)觀察模型表現
cm <- table(testdata$card, result, dnn = c("實際", "預測"))
cm
#(6)正確率
#計算核準卡正確率
cm[4] / sum(cm[, 2])
#計算拒補件正確率
cm[1] / sum(cm[, 1])
#整體準確率(取出對角/總數)
accuracy <- sum(diag(cm)) / sum(cm)
accuracy
install.packages("party")
library(party)
ct <- ctree(Species ~ ., data = iris)
plot(ct, main = "條件推論樹")
table(iris$Species, predict(ct))
載入隨機樹森林package
#install.packages("randomForest")
library(randomForest)
set.seed(1117)
#載入隨機樹森林package
install.packages("randomForest")
library(randomForest)
set.seed(1117)
#(2)跑隨機樹森林模型
randomforestM <- randomForest(card ~ ., data = traindata, importane = T, proximity = T, do.trace = 100)
randomforestM
#錯誤率: 利用OOB(Out Of Bag)運算出來的
plot(randomforestM)
round(importance(randomforestM), 2)
#(5)正確率
#計算核準卡正確率
cm[4] / sum(cm[, 2])
#計算拒補件正確率
cm[1] / sum(cm[, 1])
#整體準確率(取出對角/總數)
accuracy <- sum(diag(cm)) / sum(cm)
accuracy
#(1)載入iris資料
data(iris)
#(2)畫散佈圖
library(ggplot2)
#花萼長寬分佈
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species))
#花瓣長寬分佈
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species))
#(3)切分訓練及測試樣本
#設定亂數種子
set.seed(1111)
#樣本筆數
n <- nrow(iris)
#取出樣本數的idx
t_idx <- sample(seq_len(n), size = round(0.7 * n))
#訓練資料與測試資料比例: 70%建模，30%驗證
traindata <- iris[t_idx,]
testdata <- iris[ - t_idx,]
#安裝並載入class套件
library(class)
library(dplyr)
#(參數1)準備訓練樣本組答案
trainLabels <- traindata$Species
#(參數2)(參數3)去除兩個樣本組答案
knnTrain <- traindata[, - c(5)]
knnTest <- testdata[, - c(5)]
#計算k值(幾個鄰居)通常可以用資料數的平方根
kv <- round(sqrt(n))
kv
#(4)建立模型
prediction <- knn(train = knnTrain, test = knnTest, cl = trainLabels, k = kv)
#(5)評估正確性
cm <- table(x = testdata$Species, y = prediction, dnn = c("實際", "預測"))
cm
knnaccuracy <- sum(diag(cm)) / sum(cm)
knnaccuracy
#利用knn結果畫圖
#訓練組
knnTrain$Species <- trainLabels
ggplot(knnTrain, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species))
#測試組
knnTest$Species <- prediction
ggplot(knnTest, aes(x = Petal.Length, y = Petal.Width), n = 10) + geom_point(aes(color = Species)) +
stat_density2d(aes(color = Species), h = 0.6)
# 選擇k value
klist <- seq(1:(kv + kv))
knnFunction <- function(x, knnTrain, knnTest, trainLabels, testLabels) {
prediction <- knn(train = knnTrain, test = knnTest, cl = trainLabels, k = x)
cm <- table(x = testLabels, y = prediction)
accuracy <- sum(diag(cm)) / sum(cm)
}
accuracies <- sapply(klist, knnFunction, knnTrain = knnTrain, knnTest = knnTest, trainLabels = trainLabels, testLabels = testdata$Species)
# k value與準確度視覺化
df <- data.frame(
kv = klist, accuracy = accuracies)
ggplot(df, aes(x = kv, y = accuracy, label = kv, color = accuracy)) +
geom_point(size = 5) + geom_text(vjust = 2)
klist <- seq(1:(kv + kv))
knnFunction <- function(x, knnTrain, knnTest, trainLabels, testLabels) {
prediction <- knn(train = knnTrain, test = knnTest, cl = trainLabels, k = x)
cm <- table(x = testLabels, y = prediction)
accuracy <- sum(diag(cm)) / sum(cm)
}
accuracies <- sapply(klist, knnFunction, knnTrain = knnTrain, knnTest = knnTest, trainLabels = trainLabels, testLabels = testdata$Species)
accuracies <- sapply(klist, knnFunction, knnTrain = knnTrain, knnTest = knnTest, trainLabels = trainLabels, testLabels = testdata$Species)
SVMaccuracy
library(e1071)
install.packages('e1071')
library(e1071)
#(1)載入iris資料
data(iris)
#(2)畫散佈圖
library(ggplot2)
#花萼長寬分佈
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color = Species))
#花瓣長寬分佈
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + geom_point(aes(color = Species))
#(3)切分訓練及測試樣本
#設定亂數種子
set.seed(1111)
#樣本筆數
n <- nrow(iris)
#取出樣本數的idx
t_idx <- sample(seq_len(n), size = round(0.7 * n))
#訓練資料與測試資料比例: 70%建模，30%驗證
traindata <- iris[t_idx,]
testdata <- iris[ - t_idx,]
svmM <- svm(Species ~ ., data = traindata, probability = TRUE)
results <- predict(svmM, testdata, probability = TRUE)
traindata <- iris[t_idx,]
cm
SVMaccuracy <- sum(diag(cm)) / sum(cm)
SVMaccuracy
install.packages('igraph')
library(igraph)
flightSchedule <- data.frame(
from = c("台北", "台中", "高雄", "台東", "台東"),
to   = c("台中", "高雄", "台東", "綠島", "台北"))
gd <- graph.data.frame(flightSchedule)
plot(gd, layout = layout.fruchterman.reingold)
flightSchedule <- data.frame(
from = c("台北", "台中", "高雄", "台東", "台東"),
to   = c("台中", "高雄", "台東", "綠島", "台北"))
gd <- graph.data.frame(flightSchedule)
plot(gd, layout = layout.fruchterman.reingold)
install.packages('igraph')
library(igraph)
flightSchedule <- data.frame(
from = c("台北", "台中", "高雄", "台東", "台東"),
to   = c("台中", "高雄", "台東", "綠島", "台北"))
gd <- graph.data.frame(flightSchedule)
plot(gd, layout = layout.fruchterman.reingold)
install.packages("igraph")
library(igraph)
par(family=("Heiti TC Light"))
flightSchedule <- data.frame(
from = c("台中", "台中", "高雄", "台東", "台東"),
to   = c("台中", "高雄", "台東", "綠島", "台北"))
gd <- graph.data.frame(flightSchedule)
plot(gd, layout = layout.fruchterman.reingold)
par(family=("Heiti TC Light"))
flightSchedule <- data.frame(
from = c("台中", "台中", "高雄", "台東", "台東"),
to   = c("台中", "高雄", "台東", "綠島", "台北"))
gd <- graph.data.frame(flightSchedule)
plot(gd, layout = layout.fruchterman.reingold)
Hierarchy <- data.frame(
name = c("Mike", "Suzie", "James", "Anya", "Jessica", "Benson", "Kyle", "John", "kaven", "Alston", "Ivy", "MT", "Elvis", "Simon"),
Reportto = c("Suzie", "James", "Simon", "Suzie", "Suzie", "Suzie", "Suzie", "Suzie", "Suzie", "Suzie", "Suzie", "James", "James", "Daniel"))
gd <- graph.data.frame(Hierarchy)
plot(gd, layout = layout.fruchterman.reingold)
g1 <- graph( c(0,1, 1,2, 2,3, 3,4))
plot(g1,layout=layout.circle(g1))
g1 <- graph( c(0,1, 1,2, 2,3, 3,4))
g1 <- graph(c(0,1, 1,2, 2,3, 3,4))
install.packages('igraph')
library(igraph)
g1 <- graph(c(0,1, 1,2, 2,3, 3,4))
plot(g1,layout=layout.circle(g1))
install.packages("igraph")
library(igraph)
g1 <- graph(c(0,1, 1,2, 2,3, 3,4))
g1 <- graph(c(0,1,1,2,2,3,3,4))
g2 <- graph.star(10, mode = "in")
plot(g2,layout=layout.fruchterman.reingold(g2))
bfs(g2, 1000)
install.packages("instaR", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("httr", lib.loc="~/Library/R/3.3/library")
require(httr)
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\1")
print(full_url)
app_name <- "TEST123"
client_id <- "62114a5684294423aa999f7415a620c7"
client_secret <- " 3dfd1caf461143bc82aadc1dd98ed266 "
scope = "basic"
my_oauth <- instaOAuth(app_id=" 62114a5684294423aa999f7415a620c7", app_secret=" 3dfd1caf461143bc82aadc1dd98ed266")
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- searchInstagram(tag="obama", token=my_oauth)
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
my_oauth <- instaOAuth(app_id=" 62114a5684294423aa999f7415a620c7", app_secret=" 3dfd1caf461143bc82aadc1dd98ed266")
require(httr)
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
my_oauth <- instaOAuth(app_id=" 62114a5684294423aa999f7415a620c7", app_secret=" 3dfd1caf461143bc82aadc1dd98ed266")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret=" 3dfd1caf461143bc82aadc1dd98ed266")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret=" 3dfd1caf461143bc82aadc1dd98ed266")
1
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
install.packages("httpuv", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
save(my_oauth, file="my_oauth")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- searchInstagram(tag="obama", token=my_oauth)
obama <- searchInstagram(tag="Nike", token=my_oauth)
getFollows(qpalzmwsx3, my_oauth, userid = NULL, verbose = TRUE)
getFollows("qpalzmwsx3", my_oauth, userid = NULL, verbose = TRUE)
euromaidan <- searchInstagram("euromaidan", my_oauth, n=100, folder="euromaidan")
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
save(my_oauth, file="my_oauth")
load("my_oauth")
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
require(httr)
library("httpuv", lib.loc="~/Library/R/3.3/library")
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
require(httr)
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- getUserMedia( username="barackobama", token=my_oauth )
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266")
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- getUserMedia( username="barackobama", token=my_oauth )
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266", scope="public_content")
save(my_oauth, file="my_oauth")
load("my_oauth")
require(httr)
obama <- getUserMedia( username="barackobama", token=my_oauth )
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266", scope="basic")
save(my_oauth, file="my_oauth")
load("my_oauth")
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266", scope = c("basic", "public_content"))
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- getUserMedia( username="barackobama", token=my_oauth )
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
getComments(qpalzmwsx3, my_oauth, verbose = TRUE)
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
obama <- getUserMedia(username="barackobama", token=my_oauth)
getComments('qpalzmwsx3', my_oauth, verbose = TRUE)
getLikes("62114a5684294423aa999f7415a620c7", my_oauth, verbose = TRUE)
obama <- getUserMedia( username="barackobama", token=my_oauth, n=1)
library("httpuv", lib.loc="~/Library/R/3.3/library")
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
require(httr)
my_oauth <- instaOAuth(app_id="62114a5684294423aa999f7415a620c7", app_secret="3dfd1caf461143bc82aadc1dd98ed266", scope = c("basic", "public_content"))
save(my_oauth, file="my_oauth")
load("my_oauth")
obama <- getUserMedia(username="barackobama", token=my_oauth, n=1)
obama <- getUserMedia(username="qpalzmwsx3", token=my_oauth, n=1)
obama <- getUserMedia(username="qpalzmwsx1", token=my_oauth, n=1)
obama <- getUserMedia(username="qpalzmwsx1", token=my_oauth)
obama
getLikes("qpalzmwsx1", my_oauth, verbose = TRUE)
require(httr)
full_url <- oauth_callback()
full_url <- gsub("(.*localhost:[0-9]{1,5}/).*", x=full_url, replacement="\\1")
print(full_url)
app_name <- "TEST123"
client_id <- "62114a5684294423aa999f7415a620c7"
client_secret <- "3dfd1caf461143bc82aadc1dd98ed266"
scope = "public_content"
instagram <- oauth_endpoint(
authorize = "https://api.instagram.com/oauth/authorize",
access = "https://api.instagram.com/oauth/access_token")
myapp <- oauth_app(app_name, client_id, client_secret)
ig_oauth <- oauth2.0_token(instagram, myapp,scope="basic",  type = "application/x-www-form-urlencoded",cache=FALSE)
tmp <- strsplit(toString(names(ig_oauth$credentials)), '"')
token <- tmp[[1]][30]
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/self/?access_token=',token,sep="")))
library("jsonlite", lib.loc="~/Library/R/3.3/library")
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/self/?access_token=',token,sep="")))
require(httr)
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/self/?access_token=',token,sep="")))
library("RCurl", lib.loc="~/Library/R/3.3/library")
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/self/?access_token=',token,sep="")))
user_info
username <- "qpalzmwsx1"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")),unexpected.escape = "keep")
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")))
user_info
ig_oauth <- oauth2.0_token(instagram, myapp,scope="basic",  type = "application/x-www-form-urlencoded",cache=FALSE)
tmp <- strsplit(toString(names(ig_oauth$credentials)), '"')
token <- tmp[[1]][30]
username <- "qpalzmwsx1"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")))
user_info
scope = "basic"
token <- tmp[[1]][4]
username <- "qpalzmwsx1"
user_info <- fromJSON(getURL(paste('https://api.instagram.com/v1/users/search?q=',username,'&access_token=',token,sep="")))
user_info
View(user_info)
app_name <- "TEST123"
client_id <- "62114a5684294423aa999f7415a620c7"
client_secret <- "3dfd1caf461143bc82aadc1dd98ed266"
my_app_oauth<-instaOAuthclient_id,client_secret,scope="basic")
app_name <- "TEST123"
my_app_oauth <- instaOAuth(client_id,client_secret,scope="basic")
library("instaR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
my_app_oauth <- instaOAuth(client_id,client_secret,scope="basic")
my_app_oauth
my_access_token <- my_app_oauth$credentials$access_token
my_access_token
our_info<-paste("https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN")
our_info<-paste("https://api.instagram.com/v1/users/self/?access_token=ACCESS-TOKEN",sep = "")
data<-getURL(our_info)
json<-fromJSON(data)
json
our_info<-paste("https://api.instagram.com/v1/users/self/?access_token=330964778.62114a5.48cb6b7282c84279bec5992f8b8fc1d7",sep = "")
data<-getURL(our_info)
json<-fromJSON(data)
json
obama <- getUserMedia( username="barackobama", token=my_access_token)
obama <- getUserMedia( username="barackobama", token=my_access_token)
obama <- getUserMedia(username="barackobama", token=my_access_token)
obama <- getUserMedia(username="barackobama", token = my_access_token)
obama <- getUserMedia(username="barackobama", token ='330964778.62114a5.48cb6b7282c84279bec5992f8b8fc1d7')
install.packages("C50")
library(C50)
data(churn)
View(churn)
str(churnTrain)
churnTrain=churnTrain[,! names(churnTrain) %in% c("state","area_code","account_length")]
str(churnTrain)
set.seed(2)
ind=sample(2,nrow(churnTrain),replace = T,prob = c(0.7,0.3))
trainset=churnTrain[ind==1,]
testset=churnTrain[ind==2,]
dim(trainset)
dim(testset)
library(rpart)
churn.rp=rpart(churn ~ .,data = trainset)
churn.rp
printcp(churn.rp)
plotcp(churn.rp)
summary(churn.rp)
summary(churn.rp)
plot(churn.rp,margin = 0.1)
text(churn.rp,all = TRUE,use.n = TRUE)
plot(churn.rp,uniform = T,branch = 0.6,margin = 0.1)
text(churn.rp,all = TRUE,use.n = TRUE)
predictions=predict(churn.rp,testset,type = "class")
table(testset$churn,predictions)
install.packages(caret)
install.packages("caret")
library(caret)
confusionMatrix(table(testset$churn,predictions))
library(httr)
library(rjson)
library(httpuv)
library(Rfacebook)
library(stringr)
library(xml2)
library(rvest)
library(dplyr)
token = fbOAuth(app_id = "785590978272332",
app_secret = "078dcf318c71053c35aceae53669d7e8",
extended_permissions = TRUE)
fb_page = getPage(page = "190260340295",token2,n=5000,
since ='2016/05/01',until='2017/04/30')
View(fb_page)
token = fbOAuth(app_id = "1916538505252454",
app_secret = "43f3bedd3a6976946874fbd014c949c0",
extended_permissions = TRUE)
fb_page = getPage(page = "190260340295",token2,n=5000,
since ='2016/05/01',until='2017/04/30')
token2 = "EAACEdEose0cBAAfNA0bVOSPyOPb0y1SQJmwwj0PY0ugtJokIhInZCEvNZBoBadaJu1eQCmCsyZCu7kByWzmndkoUkcBHF0oA7NoLZBYLFZCXFJYbH2Pta8G3fbJQpjeDEGuhHtx94e085gy2tmqe6TdUOZCM9tVQ4qB3WEOV5RqKYNWkNoo0ZAkRZCMhiyfZAzZAIZD"
fb_page = getPage(page = "190260340295",token2,n=5000,
since ='2016/05/01',until='2017/04/30')
fb_page = getPage(page = "190260340295",token2,n=50,
since ='2016/05/01',until='2017/04/30')
View(fb_page)
con<-file(fb_page,encoding="UTF-8")
'
con<-file('fb_page',encoding="UTF-8")
con<-file('fb_page',encoding="UTF-8")
write.table(file = con,'1.csv',row.names=F,col.names=T,sep=',')
write.csv(con, file="1.csv",append=FALSE,eol="\r",row.names=F,col.names=T,sep=',')
write.csv(con, file="1.csv",row.names=F,col.names=T,sep=',')
write.table(con, file="1.csv",row.names=F,col.names=T,sep=',')
install.packages("rvest")
install.packages("dplyr")
library(httr)
install.packages("rvest")
View(fb_page)
token2 = "EAACEdEose0cBABj342EUtEdFo2Gdi7Hwlu9ffQ8SrqCEkZA8evZBKz8Uh0u3VLLMFPo37jqKIGEftMHY3RETkwemeLbOkHjsZCuZCIYiZBwOBpGPGbB9thbynUmwWO1JqSBAWjXi1vs09m0HOz0rXoBT3vVZC6P5x0jZARrtCbKb4yhjkPwGwuCL7mOnGoLPP0ZD"
fb_page = getPage(page = "190260340295",token2,n=5000,
since ='2016/05/01',until='2017/04/30')
token = fbOAuth(app_id = "785590978272332",
app_secret = "078dcf318c71053c35aceae53669d7e8",
extended_permissions = TRUE)
token = fbOAuth(app_id = "1916538505252454",
app_secret = "43f3bedd3a6976946874fbd014c949c0",
extended_permissions = TRUE)
token2 = "EAACEdEose0cBANSM3ngyXV5WDdhaZBWgZCBeZBYMI9NL09EZC6tRnat1ZAiGo2wqUHzvRygsOLWG78ZCZA6yZBICCVPHB5yZBw6GANTR9krcjYsFgiAC0aPDtkFesKMjela0UvFZBWh3ZAYrcV6ALZBVN6oycJ3fNyQe5oiRguOg4xTh2XtibEKllgqN33cSZCgEIVfUZD"
fb_page = getPage(page = "190260340295",token2,n=5000,
since ='2016/05/01',until='2017/04/30')
fb_page = getPage(page = "190260340295",token2,n=50,
since ='2016/05/01',until='2017/04/30')
View(fb_page)
typeof(fb_page)
data <- data.frame(fb_page)
write.table(data, file = "test.CSV", sep = ",",fileEncoding = "UTF-8")
write.csv(data, file = "MyData.csv", sep = ",",fileEncoding = "UTF-8")
write.csv(data, file = "MyData.csv",fileEncoding = "UTF-8")
write.csv.utf8.BOM <- function(df, filename)
{
con <- file(filename, "w")
tryCatch({
for (i in 1:ncol(df))
df[,i] = iconv(df[,i], to = "UTF-8")
writeChar(iconv("\ufeff", to = "UTF-8"), con, eos = NULL)
write.csv(df, file = con)
},finally = {close(con)})
}
write.csv.utf8.BOM(data,dc.csv)
write.csv.utf8.BOM(data,'dc.csv')
data1<-read.csv('sort_comment_new.csv',sep = ",")
View(data1)
data2<-read.csv('sort_comment_new123.csv',sep = ",")
View(data2)
data2<-read.csv('sort_comment_new123.csv')
View(data2)
data2<-read.csv('sort_comment_new123.csv',sep = "\t")
View(data2)
data1<-read.csv('sort_comment_new.csv',sep = ",")
View(data1)
data2<-read.csv('sort_comment_new123.csv',sep = "\t")
data3<-cbind(data1,data2)
View(data3)
write.table(data3, file = "totalfinal.CSV", sep = ",")
View(data2)
View(data3)
write.table(data3, file = "totalfinal.CSV", sep = "," ,header=TRUE)
write.table(data3, file = "totalfinall.CSV", sep = "," )
write.table(data3, file = "totalfinalll.CSV", sep = "," ,col.names = TRUE,row.names = TRUE)
write.csv(data3, file = "MyData.csv", sep = ",")
write.csv(data3, file = "MyData.csv")
data1<-read.csv('DTR.csv',sep = ",")
View(data1)
library("ggplot2", lib.loc="~/Library/R/3.3/library")
ggplot(data1, aes(x = x, y = y1)) +
geom_line()
View(data1)
ggplot(data1, aes(x = data1$Maxdepth, y = data1$Rms)) +
geom_line()
